import org.mybatis.spring.support.SqlSessionDaoSupport;
import org.springframework.stereotype.Repository;
import org.springframework.util.Assert;

import java.util.Date;
import java.util.List;

@Repository
public class ${table.beanName}DAOImpl extends SqlSessionDaoSupport implements ${table.beanName}DAO {


    @Override
    public List<${table.beanName}DO> query(${table.beanName}Query query) {

        Assert.notNull(query);

        query.decorate();

        return this.getSqlSession().selectList("${table.namespace}.QUERY", query);
    }

    @Override
    public Integer count(${table.beanName}Query query) {

        Assert.notNull(query);

        return this.getSqlSession().selectOne("${table.namespace}.COUNT", query);
    }

    @Override
    public ${table.beanName}DO findBy${table.findByIdKey.fUpperColumnName}(${table.findByIdKey.findByIdJavaKeyType} ${table.findByIdKey.fieldName}) {

        Assert.notNull(${table.findByIdKey.fieldName}, "${table.findByIdKey.fieldName}不能为空");

        return this.getSqlSession().selectOne("${table.namespace}.FIND_BY_${table.findByIdKey.upperColumnName}", ${table.findByIdKey.fieldName});
    }

    @Override
    public int updateBy${table.findByIdKey.fUpperColumnName}(${table.beanName}DO updateParam) {

        Assert.notNull(updateParam);
        Assert.notNull(updateParam.get${table.findByIdKey.fUpperColumnName}(), "${table.findByIdKey.fieldName}不能为空");

        updateParam.setCreateTime(null);
        updateParam.setModifyTime(new Date());

        return this.getSqlSession().update("${table.namespace}.UPDATE_BY_${table.findByIdKey.upperColumnName}", updateParam);
    }

    @Override
    public int insert(${table.beanName}DO ${table.injectName}DO) {

        checkParamForInsert(${table.injectName}DO);

        ${table.injectName}DO.setCreateTime(new Date());
        ${table.injectName}DO.setModifyTime(null);

        return this.getSqlSession().insert("${table.namespace}.INSERT", ${table.injectName}DO);
    }

    private void checkParamForInsert(${table.beanName}DO ${table.injectName}DO) {

        Assert.notNull(${table.injectName}DO);

        //TODO check code

    }


}