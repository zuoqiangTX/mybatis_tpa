#set($start="{")
#set($end="}")
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${table.namespace}">

    <resultMap id="BaseResultMap" type="${table.beanName}">
        #foreach($column in $table.columns)
	        #if($column.isPrimaryKey())
	            <id column="${column.columnName}"  property="${column.fieldName}"/>
	        #else
	            <result column="${column.columnName}"  property="${column.fieldName}"/>
	        #end
    	#end
    </resultMap>

    <sql id="Base_Column_List">
    #foreach($column in $table.columns)
	    ${column.columnName}#if( $foreach.hasNext ),
	#end
    #end
    
    </sql>
    
    <sql id="_sql_where">
	    #foreach($column in $table.columns)
	    	#if($column.whereParam)
	    		#if($column.javaType == 'java.lang.String')
	    		    #set($test= ${column.fieldName}+" != null and "+${column.fieldName}+" != '' ")
		        #else
		            #set($test= ${column.fieldName}+" != null")
		        #end
		        <if test="$test">
		            #set($value="#{"+$column.fieldName+"}")
		                and ${column.columnName}=${value}
		        </if>
	    	#end
	    #end
	    #foreach($column in $table.includes)
	    	#set($test1= "include${column.fUpperfieldName}List != null")
	        <if test="$test1">
	        	and ${column.fieldName} in
	        	<foreach collection="include${column.fUpperfieldName}List" item="item" separator="," open="("
                     close=")">
                #{item}
            	</foreach>
	        </if>
	        #set($test2= "exclude${column.fUpperfieldName}List != null")
	        <if test="$test2">
	        	and ${column.fieldName} not in
	        	<foreach collection="exclude${column.fUpperfieldName}List" item="item" separator="," open="("
                     close=")">
                #{item}
            	</foreach>
	        </if>
	    #end
	    
    </sql>
    
    <sql id="_select_limit">
        <if test="offset != null and limit != null">
            limit #{offset} , #{limit}
        </if>
    </sql>

    <sql id="_select_orderby">
        <if test="orderBy != null">
            ORDER BY ${orderBy.columnName} ${orderBy.type}
        </if>
    </sql>
    
    <insert id="INSERT" parameterType="${table.beanName}" useGeneratedKeys="true" keyProperty="${table.primaryKey.fieldName}">
        INSERT INTO ${table.tableName} (<include refid="Base_Column_List" />)
        VALUES( #foreach($column in $table.columns) #set($value="#{"+$column.fieldName+"}") ${value} #if( $foreach.hasNext),#end #end)
    </insert>

	<select id="FIND_BY_UNIQUE" parameterType=#if($table.uniques.size() > 1) "map" #else "${table.uniques.get(0).javaType}" #end  resultMap="BaseResultMap">
	    select
		    <include refid="Base_Column_List" />
		from
		    ${table.tableName}
		where
       	#foreach($column in $table.uniques)
       	${column.columnName} = #{${column.fieldName}}
       	#if($foreach.hasNext) and #end
		#end
	</select>

    <update id="UPDATE_BY_UNIQUE" parameterType="${table.beanName}">
        update ${table.tableName}
        <set>
	        #foreach($column in $table.columns)
	        #if(!$column.isPrimaryKey())
	            #if($column.javaType == 'java.lang.String')
	                #set($updateTest=${column.fieldName}+" != null and "+${column.fieldName}+" != '' ")
	            #else
	                #set($updateTest=${column.fieldName}+" != null")
	            #end
	            <if test="$updateTest">
	                #set($value="#{"+$column.fieldName+"}")
	                ${column.columnName}=${value}#if( $foreach.hasNext ),#end
	                
	            </if>
	            #end
	        #end
        </set>
        where
        	#foreach($column in $table.uniques)
				${column.columnName} = #{${column.fieldName}}
				#if($foreach.hasNext) and #end
        	#end
        	
    </update>

    <select id="QUERY" parameterType="map" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from
            ${table.tableName}
        <where>
            <trim prefix="" prefixOverrides="and" suffix="">
                <include refid="_sql_where"/>
            </trim>
        </where>
        <include refid="_select_orderby" />
        <include refid="_select_limit" />
    </select>

    <select id="COUNT" parameterType="map" resultType="int">
        select
            count(1)
        from
            ${table.tableName}
        <where>
            <trim prefix="" prefixOverrides="and" suffix="">
                <include refid="_sql_where"/>
            </trim>
        </where>
    </select>

</mapper>