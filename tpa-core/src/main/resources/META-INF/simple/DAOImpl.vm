import org.mybatis.spring.support.SqlSessionDaoSupport;
import org.springframework.stereotype.Repository;
import org.springframework.util.Assert;

import java.util.Date;
import java.util.List;

@Repository
public class ${table.beanName}DAOImpl extends SqlSessionDaoSupport implements ${table.beanName}DAO {

	@Override
    public int insert(${table.beanName} ${table.injectName}) {
        ${table.injectName}.setCreateTime(new Date());
        ${table.injectName}.setModifyTime(null);

        return this.getSqlSession().insert("${table.namespace}.INSERT", ${table.injectName});
    }

    @Override
    public List<${table.beanName}> query(${table.beanName}Query query) {
        Assert.notNull(query);

        query.decorate();

        return this.getSqlSession().selectList("${table.namespace}.QUERY", query);
    }

    @Override
    public Integer count(${table.beanName}Query query) {
        Assert.notNull(query);

        return this.getSqlSession().selectOne("${table.namespace}.COUNT", query);
    }

    @Override
    public ${table.beanName} findByUnique(#foreach($column in $table.uniques) ${column.SimpleJavaType} ${column.fieldName} #if( $foreach.hasNext ),#end #end) {
		#foreach($column in $table.uniques)
			Assert.notNull(${column.fieldName}, "${column.fieldName}不能为空");		
		#end
		
		#if($table.uniques.size()>1)
			Map<String,Object> paramMap = new HashMap<String,Object>();
			#foreach($column in $table.uniques)
				paramMap.add("${column.fieldName}",${column.fieldName});
			#end
			
			return this.getSqlSession().selectOne("${table.namespace}.FIND_BY_UNIQUE", paramMap);
		#else
			return this.getSqlSession().selectOne("${table.namespace}.FIND_BY_UNIQUE", ${table.uniques.get(0).fieldName});
		#end
    }

    @Override
    public int updateByUnique(${table.beanName} updateParam) {
        Assert.notNull(updateParam,"更新参数不能为空");
        #foreach($column in $table.uniques)
			Assert.notNull(updateParam.get${column.fUpperfieldName}(), "${column.fieldName}不能为空");
		#end

        updateParam.setCreateTime(null);
        updateParam.setModifyTime(new Date());

        return this.getSqlSession().update("${table.namespace}.UPDATE_BY_UNIQUE", updateParam);
    }

}